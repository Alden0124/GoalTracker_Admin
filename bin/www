#!/usr/bin/env node

import debug from "debug";
import dotenv from 'dotenv';
import http from "http";
import path from 'path';
import { fileURLToPath } from 'url';
import app, { initializeApp } from "../app.js";
import { initializeSocketIO } from "../controllers/socketController.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename); 

// 載入環境變數
const envPath = path.resolve(__dirname, '..', '.env');
console.log('正在載入環境變數文件:', envPath);
dotenv.config({ path: envPath });

const debugLog = debug("goaltracker:server");
let server;

async function startServer() {
  try {
    // 創建 HTTP server
    const port = normalizePort(process.env.PORT || "3001");
    app.set("port", port);
    
    server = http.createServer(app);
    
    // 初始化 Socket.IO
    const io = initializeSocketIO(server);
    // 將 io 實例存儲在 app 中
    app.set('io', io);
    
    // 啟動服務器
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);

    // 初始化應用程序（數據庫連接等）
    await initializeApp();
    
    console.log(`伺服器運行在端口 ${port}`);
    console.log('WebSocket 服務已啟動');
    
  } catch (error) {
    console.error('服務器啟動失敗:', error);
    process.exit(1);
  }
}

// 驗證環境變數
const requiredEnvVars = [
  'MONGODB_URI', 
  'EMAIL_USER', 
  'EMAIL_APP_PASSWORD',
  'CLIENT_URL'  // 添加 WebSocket 需要的環境變數
];

const missingEnvVars = requiredEnvVars.filter(varName => !process.env[varName]);

if (missingEnvVars.length > 0) {
  console.error('缺少必要環境變量:', missingEnvVars);
  process.exit(1);
}

console.log('環境變數載入狀態：', {
  NODE_ENV: process.env.NODE_ENV,
  PORT: process.env.PORT,
  CLIENT_URL: process.env.CLIENT_URL
});

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const port = server.address().port;
  const bind = typeof port === "string"
    ? "Pipe " + port
    : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " 需要提升權限");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " 已被占用");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string"
    ? "pipe " + addr
    : "port " + addr.port;
  debugLog("正在監聽 " + bind);
}

// 啟動服務器
startServer();

// 處理未捕獲的異常
process.on('unhandledRejection', (error) => {
  console.error('未處理的 Promise 拒絕:', error);
});

process.on('uncaughtException', (error) => {
  console.error('未捕獲的異常:', error);
  process.exit(1);
});
